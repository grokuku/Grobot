# app/schemas/chat_schemas.py

from pydantic import BaseModel, Field
from typing import List, Optional, Any

class ChatMessage(BaseModel):
    """
    Schema for a single message in a conversation history.
    """
    role: str = Field(..., description="The role of the message author (e.g., 'user', 'assistant', 'system', 'tool').")
    content: str = Field(..., description="The text content of the message.")
    tool_calls: Optional[List[Any]] = Field(None, description="A list of tool calls requested by the model.")

class AttachedFile(BaseModel):
    """
    Schema for essential metadata of a file attached to a chat request.
    """
    uuid: str = Field(..., description="The unique UUID of the uploaded file.")
    filename: str = Field(..., description="The original filename of the uploaded file.")
    file_family: str = Field(..., description="The high-level family of the file (e.g., 'image', 'text').")

# --- NOUVEAU: Schémas pour le Contexte Discord ---

class UserContext(BaseModel):
    """
    Represents the Discord user who sent the message.
    """
    discord_id: int
    name: str
    display_name: str

class ChannelContext(BaseModel):
    """
    Represents the Discord context (channel, server) where the message was sent.
    """
    context_type: str = Field(..., description="Type of context, e.g., 'DIRECT_MESSAGE' or 'SERVER_CHANNEL'.")
    server_id: Optional[int] = None
    server_name: Optional[str] = None
    channel_id: int
    channel_name: Optional[str] = None


# --- Schéma de Requête Principal ---

class ChatRequest(BaseModel):
    """
    Schema for an incoming streaming chat request, used by the main bot process.
    Contains a message history and can include a system prompt and tools.
    """
    bot_id: int = Field(..., description="The unique numeric ID of the bot processing the request.")
    messages: List[ChatMessage] = Field(..., description="The list of messages constituting the conversation history.")

    # --- NOUVEAU: Champs de contexte ajoutés ---
    user_context: Optional[UserContext] = Field(None, description="Information about the user who sent the message.")
    channel_context: Optional[ChannelContext] = Field(None, description="Information about the channel/server where the message was sent.")
    channel_history: Optional[List[str]] = Field(None, description="The recent message history from the Discord channel.")
    # ----------------------------------------

    system: Optional[str] = Field(None, description="The complete system prompt to use for this specific interaction.")
    tools: Optional[List[Any]] = Field(None, description="A list of tools the model can use, in the format expected by the provider (e.g., Ollama).")
    attached_files: Optional[List[AttachedFile]] = Field(None, description="A list of files attached to the user's message.")
    contextual_image_url: Optional[str] = Field(None, description="An image URL found in the immediate context of the user's message.")

# --- NOUVEAU: Schéma de Requête pour le Synthétiseur ---
class SynthesizeRequest(BaseModel):
    """
    Schema for an incoming synthesis request. It is a subset of ChatRequest,
    specifically excluding the 'tools' field to prevent the synthesizer from
    being able to call them.
    """
    bot_id: int = Field(..., description="The unique numeric ID of the bot processing the request.")
    messages: List[ChatMessage] = Field(..., description="The list of messages constituting the conversation history.")
    user_context: Optional[UserContext] = Field(None, description="Information about the user who sent the message.")
    channel_context: Optional[ChannelContext] = Field(None, description="Information about the channel/server where the message was sent.")
    channel_history: Optional[List[str]] = Field(None, description="The recent message history from the Discord channel.")
    system: Optional[str] = Field(None, description="The complete system prompt to use for this specific interaction.")
    attached_files: Optional[List[AttachedFile]] = Field(None, description="A list of files attached to the user's message.")


class ChatResponse(BaseModel):
    """
    Schema for the API's response to a streaming chat request.
    This is not currently used to send a final response body, as the response is a stream.
    """
    response_content: str = Field(..., description="The text content of the response to be posted.")

# --- NOUVEAU: Schéma pour l'Archiviste ---

class ArchivistRequest(BaseModel):
    """
    Schema for a request to the archivist service.
    """
    chat_context: ChatRequest = Field(..., description="The original chat request context, including history and user info.")
    final_bot_response: str = Field(..., description="The final, complete text response generated by the Synthesizer.")

# --- NOUVEAU: Schémas pour l'Acknowledge-Synthesizer ---

class AcknowledgeRequest(BaseModel):
    """
    Schema for a request to the Acknowledge-Synthesizer.
    """
    bot_id: int = Field(..., description="The ID of the bot that needs to generate the message.")
    user_context: UserContext = Field(..., description="Context about the user to address.")
    tool_name: str = Field(..., description="The name of the slow tool that is about to be executed.")

class AcknowledgeResponse(BaseModel):
    """
    Schema for the response from the Acknowledge-Synthesizer.
    """
    acknowledgement_message: str = Field(..., description="The generated message to send to the user.")


# --- Additions for the Test Chat ---

class TestChatRequest(BaseModel):
    """
    Schema for a simple, stateless request from the UI's test chat.
    """
    bot_id: int = Field(..., description="The ID of the bot to which the message is addressed.")
    user_message: str = Field(..., description="The single message sent by the user from the test interface.")

class TestChatResponse(BaseModel):
    """
    Schema for the response to a test chat request.
    """
    bot_response: str = Field(..., description="The final, complete text response from the bot.")