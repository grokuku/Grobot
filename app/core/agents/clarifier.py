import logging
from typing import Dict, Any, List

from app.core.agents.prompts import CLARIFIER_SYSTEM_PROMPT
from app.core.llm.ollama_client import get_llm_response
from app.schemas.chat_schemas import ChatMessage

logger = logging.getLogger(__name__)


async def run_clarifier(
    technical_question: str,
    bot_personality: str,
    bot_name: str,
    history: List[ChatMessage]
) -> str:
    """
    Runs the Clarifier agent to rephrase a technical question into a
    user-facing, personality-consistent question.

    Args:
        technical_question: The question generated by the Parameter Extractor.
        bot_personality: The personality instructions for the bot.
        bot_name: The name of the bot.
        history: The conversation history, to provide context.

    Returns:
        A user-friendly, rephrased question. Returns a generic fallback
        message in case of an error.
    """
    logger.debug("Running Clarifier to rephrase technical question...")

    # 1. Inject the dynamic values into the system prompt template.
    prompt = CLARIFIER_SYSTEM_PROMPT.strip()
    prompt = prompt.replace("{{bot_name}}", bot_name)
    prompt = prompt.replace("{{bot_personality}}", bot_personality)
    prompt = prompt.replace("{{clarification_question}}", technical_question)

    messages = [msg.model_dump() for msg in history]

    try:
        # 2. Call the LLM. We expect a simple text response here, not JSON.
        # Note the use of get_llm_response instead of get_llm_json_response
        response = await get_llm_response(
            system_prompt=prompt,
            messages=messages
        )
        
        # The response is the rephrased question itself.
        rephrased_question = response.strip()
        logger.info(f"Clarifier rephrased question to: '{rephrased_question}'")
        return rephrased_question

    except Exception as e:
        logger.error(f"An unexpected error occurred in Clarifier: {e}", exc_info=True)
        # Provide a safe, generic fallback question if the agent fails.
        return f"I need a bit more information. {technical_question}"